version: 2.1

orbs:
  node: circleci/node@5.0.2
  aws-cli: circleci/aws-cli@3.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Delete cloudfront stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udacity-cloudfront-$CIRCLE_WORKFLOW_ID" || true
      - run:
          name: Delete all files from S3 bucket
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-$CIRCLE_WORKFLOW_ID" --recursive || true
      - run:
          name: Delete backend stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udacity-backend-$CIRCLE_WORKFLOW_ID" || true
      - run:
          name: Delete frontend stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udacity-frontend-$CIRCLE_WORKFLOW_ID" || true

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 ));
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:14.20.1
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            ls -l
            ls -l dist
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:14.20.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend/dist

  test-frontend:
    docker:
      - image: cimg/node:14.20.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test the frontend
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: cimg/node:14.20.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test the backend
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:14.20.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Lint the frontend
          command: |
            cd frontend
            npm run lint

  scan-backend:
    docker:
      - image: cimg/node:14.20.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Lint the backend
          command: |
            cd backend
            npm run lint

  deploy-infrastructure:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --stack-name "udacity-backend-$CIRCLE_WORKFLOW_ID" \
              --template-file .circleci/files/backend.yml \
              --parameter-overrides ID=$CIRCLE_WORKFLOW_ID

            export BACKEND_HOSTNAME=$(aws cloudformation describe-stacks \
              --stack-name "udacity-backend-$CIRCLE_WORKFLOW_ID" \
              --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicHostname`].OutputValue' \
              --output text)

            echo "BACKEND_HOSTNAME=$BACKEND_HOSTNAME" >> .local-vars

            export API_URL="http://${BACKEND_HOSTNAME}:3030"

            echo "API_URL=${API_URL}" >> .local-vars

            cat .local-vars
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --stack-name "udacity-frontend-$CIRCLE_WORKFLOW_ID" \
              --template-file .circleci/files/frontend.yml \
              --parameter-overrides ID=$CIRCLE_WORKFLOW_ID

            export BUCKET_URL=$(aws cloudformation describe-stacks \
              --stack-name "udacity-frontend-$CIRCLE_WORKFLOW_ID" \
              --query 'Stacks[0].Outputs[?OutputKey==`WebsiteURL`].OutputValue' \
              --output text)

            export BUCKET_NAME=$(aws cloudformation describe-stack-resources \
              --stack-name "udacity-frontend-$CIRCLE_WORKFLOW_ID" \
              --query 'StackResources[?LogicalResourceId==`WebsiteBucket`].PhysicalResourceId' \
              --output text)

            echo "BUCKET_URL=$BUCKET_URL" >> .local-vars
            echo "BUCKET_NAME=$BUCKET_NAME" >> .local-vars

            cat .local-vars
      - persist_to_workspace:
          root: ./
          paths:
            - .local-vars
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cat .local-vars

            aws ec2 describe-instances \
              --filters "Name=instance-state-name,Values=running" \
              --query 'Reservations[*].Instances[*].NetworkInterfaces[*].Association.PublicDnsName' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      #- destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10.7
    steps:
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints:
            - "e6:d2:1d:5f:a5:94:bd:4a:89:3c:71:35:31:62:d5:29"
      - attach_workspace:
          at: workspace
      - run:
          name: Install dependencies
          command: |
            python3 -m pip install --user ansible
            ansible-galaxy collection install community.general
      - run:
          name: Configure server
          command: |
            ansible-playbook -vvv \
              -i workspace/project/.circleci/ansible/inventory.txt \
              .circleci/ansible/configure-server.yml
      #- destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:14.20.1
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations

  deploy-frontend:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - node/install:
          node-version: '14.20.1'
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Install dependencies
          command: |
            cd frontend
            cat ~/workspace/.local-vars
            source ~/workspace/.local-vars
            npm i
            echo "API_URL ${API_URL}"
            export API_URL=$API_URL
            npm run build
            aws s3 cp ./dist s3://$BUCKET_NAME/ --recursive
      #- destroy-environment

  deploy-backend:
    docker:
      - image: cimg/python:3.10.7
    steps:
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints:
            - "e6:d2:1d:5f:a5:94:bd:4a:89:3c:71:35:31:62:d5:29"
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Install dependencies
          command: |
            python3 -m pip install --user ansible
            ansible-galaxy collection install community.general
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -vvv \
              -i ~/workspace/project/.circleci/ansible/inventory.txt \
              .circleci/ansible/deploy-backend.yml
      #- destroy-environment

  smoke-test:
    docker:
      - image: curlimages/curl
    steps:
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Backend smoke test
          command: |
            sleep 30
            source ~/workspace/.local-vars
            export API_URL=$API_URL
            curl "$API_URL/api/Employees" > /dev/null
      - run:
          name: Frontend smoke test
          command: |
            source ~/workspace/.local-vars
            export BUCKET_URL=$BUCKET_URL
            curl "$BUCKET_URL" | grep Welcome > /dev/null

  cloudfront-update:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --stack-name "udacity-cloudfront-$CIRCLE_WORKFLOW_ID" \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID=$CIRCLE_WORKFLOW_ID
      #- destroy-environment

  cleanup:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            ./util/final-cleanup.sh


workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: master
      # - run-migrations:
      #     requires: [configure-infrastructure]
      #     filters:
      #       branches:
      #         only: master
      # - deploy-frontend:
      #     requires: [run-migrations]
      #     filters:
      #       branches:
      #         only: master
      - deploy-backend:
          # requires: [run-migrations]
          requires: [configure-infrastructure]
          filters:
            branches:
              only: master
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      #     filters:
      #       branches:
      #         only: master
      # - cloudfront-update:
      #     requires: [smoke-test]
      #     filters:
      #       branches:
      #         only: master
      # - cleanup:
      #     requires: [cloudfront-update]
      #     filters:
      #       branches:
      #         only: master
